@page "/todo"
@using BlazorEventsTodo.Todo
@using NodaTime 
@inject HttpClient Http

    <h3>Todo</h3>

    <div class="container">
        <div class="row">
            <div class="col">
                <input placeholder="Something todo" @bind="newTodoTitle" />
                <button @onclick="AddTodo">Add todo</button>
                <button @onclick="RefreshTodoList">Refresh</button>

                <ul>
                    @foreach (var todo in todos)
                    {
                        <li>
                            <input type="checkbox" checked="@todo.IsFinished" @onchange="eventArgs => ToggleTaskFinished(todo.Id, (bool)eventArgs.Value)" />
                            <span>@todo.Title</span>
                            <button @onclick="_ => DeleteTodo(todo.Id)">X</button>
                        </li>
                    }
                </ul>
            </div>
            <div class="col">
                <h4>Todos history</h4>

                <ul>
                    @foreach (var todo in history.Reverse())
                    {
                    <li>
                        <span>@todo.Changed.InZone(DateTimeZoneProviders.Tzdb.GetSystemDefault()).ToString("yyyy'-'MM'-'dd' 'HH':'mm':'ss", null)</span>
                        - 
                        <span>@todo.Description</span>
                    </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    @code {
        private IList<TodoItem> todos = new List<TodoItem>();
        private IList<TodoHistoryItem> history = new List<TodoHistoryItem>();
        private string newTodoTitle;
        private System.Threading.Timer refreshTimer;

        protected override Task OnInitializedAsync()
        {
            refreshTimer = new System.Threading.Timer((System.Threading.TimerCallback)RefreshTick, null, TimeSpan.Zero, TimeSpan.FromSeconds(0.3));

            return Task.CompletedTask;
        }

        private async void RefreshTick(object context)
        {
            await RefreshTodoList();
        }

        private async Task RefreshTodoList()
        {
            todos = await Http.GetFromJsonAsync<List<TodoItem>>("/api/todo");
            history = await Http.GetFromJsonAsync<List<TodoHistoryItem>>("/api/todo/history", DefaultJsonOptions.Options);
            StateHasChanged();
        }

        private async Task AddTodo()
        {
            if (string.IsNullOrWhiteSpace(newTodoTitle))
                return;

            var res = await Http.PostAsJsonAsync("/api/todo", new CreateTodo() { Title = newTodoTitle });
            res.EnsureSuccessStatusCode();
            newTodoTitle = string.Empty;
        }

        private async Task DeleteTodo(Guid id)
        {
            var res = await Http.DeleteAsync($"/api/todo/{id}");
            res.EnsureSuccessStatusCode();
        }

        private async Task ToggleTaskFinished(Guid id, bool newValue)
        {
            var action = newValue ? "finish" : "start";

            var res = await Http.PostAsJsonAsync($"/api/todo/{id}/{action}", "");
            res.EnsureSuccessStatusCode();
        }
    }
